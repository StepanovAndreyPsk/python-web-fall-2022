# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import service_pb2 as service__pb2


class TestServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.Health = channel.unary_unary(
            "/TestService/Health",
            request_serializer=service__pb2.Null.SerializeToString,
            response_deserializer=service__pb2.Null.FromString,
        )
        self.AddTicket = channel.unary_unary(
            "/TestService/AddTicket",
            request_serializer=service__pb2.Ticket.SerializeToString,
            response_deserializer=service__pb2.Confirmation.FromString,
        )


class TestServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def Health(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddTicket(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Health": grpc.unary_unary_rpc_method_handler(
            servicer.Health,
            request_deserializer=service__pb2.Null.FromString,
            response_serializer=service__pb2.Null.SerializeToString,
        ),
        "AddTicket": grpc.unary_unary_rpc_method_handler(
            servicer.AddTicket,
            request_deserializer=service__pb2.Ticket.FromString,
            response_serializer=service__pb2.Confirmation.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "TestService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
